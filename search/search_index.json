{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DynamicGUI Introduction Welcome to the DynamicGUI documentation. To begin, it\u2019s recommended that you are familiar with at least one of the following confirmation types: .yaml or .yml (recommended) .json .xml .hocon Examples for how to code and configure DynamicGUI will be provided using the .yaml/.yml file type. Current Features Create variable GUIs with high complexity while also maintaining ease of configurability.","title":"Basics"},{"location":"#dynamicgui","text":"","title":"DynamicGUI"},{"location":"#introduction","text":"Welcome to the DynamicGUI documentation. To begin, it\u2019s recommended that you are familiar with at least one of the following confirmation types: .yaml or .yml (recommended) .json .xml .hocon Examples for how to code and configure DynamicGUI will be provided using the .yaml/.yml file type.","title":"Introduction"},{"location":"#current-features","text":"Create variable GUIs with high complexity while also maintaining ease of configurability.","title":"Current Features"},{"location":"anatomy/","text":"Basic GUI Anatomy Before diving deep into DynamicGUI, it\u2019s essential to grasp the anatomy or components comprising a GUI. Top-Level Properties At its highest level, a GUI consists of properties determining the base behavior. Property Name Description Requirements title This is the title of the GUI Menu. This will appear at the top of each GUI. For no title, keep as \u2018\u2019 or \u201c\u201d Required. For no title, keep as \u2018\u2019 or \u201c\u201d rows Rows determine the amount of rows the GUI will generate. For each row, it will generate 9 configurable slots. The player's inventory slots cannot be configured. This is a required property ONLY IF your type property is set to CHEST or is not mentioned as a property. (minimum: 1 - maximum: 6) Required. Min.: 1; Max.: 6 close A boolean argument which determines the behavior of the GUI when a slot has been interacted with. 'true' will close the GUI when a slot is interacted. 'false' will NOT close the GUI when a slot is interacted. Optional. type Set the GUI type. Available types can be found here . Type is CHEST by default. Optional. alias The different command aliases available to open the GUI. This is optional. Optional. functions A set of behaviors based on a specified action. Optional. macros User-defined placeholders holding strings or values. Optional. type: Example of these properties in use: title: \"Cosmetics Menu\" rows: 6 type: chest close: false alias: - cosmetics - cosmeticsmenu Slot-Level Properties Just below properties, a GUI consists of individual slots (of course, the amount of slots available within a GUI is determined by the rows top-level property) which represent various sections within the GUI. Slots can inherit characteristics from the top-level GUI, or can have the ability to override those characteristics or have unique characteristics entirely. Example of Unique Characteristics: Notice how both have macros of the same name, but their string values are unique for each slots' desired actions. 0: macros: '%name%': '&aCosmetics' '%take-me-to%': 'cosmetics' icon: 'DIRT' functions: broadcast-click: type: 'click' function: - 'gui: %take-me-to%' 1: macros: '%name%': '&aColored Names' '%take-me-to%': 'colored-names' icon: 'DIRT' functions: broadcast-click: type: 'click' function: - 'gui: %take-me-to%'","title":"GUI Anatomy"},{"location":"anatomy/#basic-gui-anatomy","text":"Before diving deep into DynamicGUI, it\u2019s essential to grasp the anatomy or components comprising a GUI.","title":"Basic GUI Anatomy"},{"location":"anatomy/#top-level-properties","text":"At its highest level, a GUI consists of properties determining the base behavior. Property Name Description Requirements title This is the title of the GUI Menu. This will appear at the top of each GUI. For no title, keep as \u2018\u2019 or \u201c\u201d Required. For no title, keep as \u2018\u2019 or \u201c\u201d rows Rows determine the amount of rows the GUI will generate. For each row, it will generate 9 configurable slots. The player's inventory slots cannot be configured. This is a required property ONLY IF your type property is set to CHEST or is not mentioned as a property. (minimum: 1 - maximum: 6) Required. Min.: 1; Max.: 6 close A boolean argument which determines the behavior of the GUI when a slot has been interacted with. 'true' will close the GUI when a slot is interacted. 'false' will NOT close the GUI when a slot is interacted. Optional. type Set the GUI type. Available types can be found here . Type is CHEST by default. Optional. alias The different command aliases available to open the GUI. This is optional. Optional. functions A set of behaviors based on a specified action. Optional. macros User-defined placeholders holding strings or values. Optional. type: Example of these properties in use: title: \"Cosmetics Menu\" rows: 6 type: chest close: false alias: - cosmetics - cosmeticsmenu","title":"Top-Level Properties"},{"location":"anatomy/#_1","text":"","title":""},{"location":"anatomy/#slot-level-properties","text":"Just below properties, a GUI consists of individual slots (of course, the amount of slots available within a GUI is determined by the rows top-level property) which represent various sections within the GUI. Slots can inherit characteristics from the top-level GUI, or can have the ability to override those characteristics or have unique characteristics entirely. Example of Unique Characteristics: Notice how both have macros of the same name, but their string values are unique for each slots' desired actions. 0: macros: '%name%': '&aCosmetics' '%take-me-to%': 'cosmetics' icon: 'DIRT' functions: broadcast-click: type: 'click' function: - 'gui: %take-me-to%' 1: macros: '%name%': '&aColored Names' '%take-me-to%': 'colored-names' icon: 'DIRT' functions: broadcast-click: type: 'click' function: - 'gui: %take-me-to%'","title":"Slot-Level Properties"},{"location":"functions/","text":"Introduction to Functions Functions are the fundamental building blocks of DynamicGui and are an essential part to what makes DynamicGui truly dynamic. Function sections can be written to be as simple or complex to suit your needs. To understand the different functions and their syntax, we must first understand their base principle. Note: The function name when used within the required syntax is not case-sensitive. For example, you could type the function 'CopyBackMetadata alternatively as: copybackmetadata , COPYBACKMETADATA , or even cOPYbACKmETAdATA . The function names were written in this documentation to improve readability. Function Anatomy Functions can be used for either Top-Level or Slot-Level behavior but the result is similar in nature. Function Properties Description Function Headers Function Headers are a required function property, but are essential to sectioning certain functions. An added benefit is that these Function Headers can be named whatever you want. It is best to keep these descriptive as they will help aid in potential troubleshooting or updating. Types Types are the different function types to determine how the GUI is desired to behave. You can have either a single type in the form of a string, or, you can have types in the form of a list. These are the different available types: switch_menu load click left right middle shift_click shift_left shift_right fail exit_menu Functions This is where you will place your functions. You can have either a single function in the form of a string, or, you can have functions in the form of a list. Fail-On The specified function where its condition was not expected or met. Whenever you need a function to occur based on a condition not expected, you will need to use the fail type. Example of Top-Level functions: functions: broadcast-load: #This is a Function Header. type: \"load\" #This is a type, using the 'load' type. functions: - 'HasPermission: essentials.broadcast' #This is a list function. broadcast-click: #This can be named anything but it should be descriptive type: #This is a type, using the 'left' and 'right' types in the form of a list function. - \"left\" - \"right\" functions: - 'Broadcast: This is an important broadcast.' #This is a list function. function-failure-permission: #This is also a Function Header fail-on: \"fail\" #This is the fail type. functions: \"Pmsg: Insufficient permission.\" #This is a string function. Example of Slot-Level functions: '13': icon: paper name: \"tutorial\" functions: loader: #This is a Function Header. type: \"load\" #This is a type, using the 'load' type in the form of a string function. functions: #This is a list function. - 'permission: tutorial' - 'setlore: &cUNLOCKED' function-fail-permission: #This is also a Function Header fail-on: 'permission: tutorial' #This is a function in which its condition was not met, while also utilizing a string function. type: \"fail\" #This is a type, using the 'fail' type. functions: \"setlore: &cLOCKED\" #This is a function. clicker: #This is a Function Header. fail-on: - 'permission: tutorial' #This is a function in which its condition was not met, while also utilizing a list function. type: \"click\" #This is a type, using the 'click' type in the form of a string function. functions: #This is a list function. - 'pmsg: Insufficient permission.' - 'sound: ENTITY_BLAZE_HURT,1.0,2.0' List of Functions Navigation and GUI Management Back Navigate back to a previous state or location with a GUI. Syntax: - 'Back' Example: - 'Back' HasBack Checks if navigation history ('Back' functionality) is available. Syntax: - 'HasBack' Example: - 'HasBack' SetBack Sets a designated back location or state within a GUI. Syntax: - 'SetBack: <boolean result>' Examples: - 'SetBack: true' Gui Open a specified GUI. Syntax: - 'Gui: <name of gui>.yml' Example: - 'Gui: cosmetics.yml' RefreshGUI Update or refresh the contents of the GUI currently being viewed. Syntax: - 'RefreshGui' Example: - 'RefreshGui' RefreshSlot Update or refresh the contents of a specific slot within the GUI. Syntax: - 'RefreshSlot: <Slot # (Range: 0-53)>' Example: - 'RefreshSlot: 31' HasMetadata Checks if metadata is set. Syntax: - 'HasMetadata' Example: - 'HasMetadata' CopyBackMetadata Copies metadata associated with navigation history. Syntax: - 'CopyBackMetadata: true' Example: - 'CopyBackMetadata: true' IsGuiMetadataSet Checks if specific GUI metadata is set. Syntax: - 'IsGuiMetadataSet: <user defined metadata>' Example: - 'IsGUIMetadataSet: %metadata_custom%' SetMetadata Sets metadata for a specific entity or block. Syntax: - 'SetMetadata: <entity>,<metadata string you want to set>,<metadata you want to use>' Examples: - 'SetMetadata: gui,preset_value,300' - 'SetMetadata: gui,preset_value,%defined_macro-metadata_price1%' CheckMovable Checks if an entity or block is movable. Syntax: - '' Example: - '' Player and Entity Management AsyncRunning Checks if an asynchronous task is currently running. Syntax: - '' Example: - '' CheckItemTypeInHand Checks the type of item currently held by the player. Syntax: - '' Example: - '' CheckLevel Verifies if a specified level meets a certain criteria. Syntax: - '' Example: - '' CheckPlayerWorld Determines the world in which a player is located. Syntax: - '' Example: - '' Executec Executes a command on the server. Syntax: - '' Example: - '' Executep Executes a command as if a player had typed it. Syntax: - '' Example: - '' IsBedrockPlayer Checks if a player is using Minecraft: Bedrock Edition. Syntax: - '' Example: - '' LoggedIn Checks if a player is logged into the server. Syntax: - '' Example: - '' Cooldown and Timing CheckTick Retrieves the current tick (unit of time) in the game. Syntax: - '' Example: - '' IsOnCooldown Checks if a specified action or player is currently on cooldown. Syntax: - '' Example: - '' SetCooldown Sets a cooldown for a specified action or player. Syntax: - '' Example: - '' Delay Introduces a delay or pause in script execution. Syntax: - '' Example: - '' Game Rule and Environment GetGameRule Retrieves the value of a specific game rule in the world. Syntax: - '' Example: - '' SetGamerule Sets a specific game rule in the world. Syntax: - '' Example: - '' Logging and Messaging Log Logs a message or event to the server console. Syntax: - 'Log: <message to be displayed as a log in the console>' Example: - 'Log: %player% purchased an item.' Msg or Pmsg Sends a message to players in the server. Syntax: - 'Msg: <message sent to player, supports vanilla colors codes only>' OR - 'Pmsg: <message sent to player>' Example: - 'Msg: Insufficient permission.' OR - 'Pmsg: Insufficient permission.' MiniMsg Sends a message to the player on the server using the minimessage format. Syntax: - 'MiniMsg: <message sent to player, supports minimessage codes only>' Example: - '' MsgJson Sends a message to the player on the server using JSON format. Syntax: - '' Example: - '' Broadcast Sends a message to all players in the Minecraft server. Syntax: - 'Bradocast: <message sent to all players>' Example: - 'Broadcast: An event will occur soon. Meet us at spawn! /spawn' MiniBroadcast Sends a minimized message to all players in the Minecraft server. Syntax: - '' Example: - '' BroadcastJson Sends a JSON-formatted message to all players in the Minecraft server. Syntax: - '' Example: - '' Inventory and Item Management OpenInventorySlots Checks if a player has an open inventory slot within their inventory. Opens additional inventory slots within a GUI. Syntax: - 'OpenInventorySlots: <# of slots, maximum: 36>' Example: - 'OpenInventorySlots: 1' RemoveSlot Removes an item from a specified inventory slot within the player's inventory. Syntax: - 'RemoveSlot: <Slot #, maximum: 36>' Example: - 'RemoveSlot: 1' SetAmount Sets the display quantity for an item as if it is a stack of items. Syntax: - 'SetAmount: <Amount, maximum: 64>' Example: - 'SetAmount: 32' SetClose Closes the current GUI. Syntax: - 'SetClose: <boolean result>' Example: - 'SetClose: true' SetDurability Sets the durability of an item. Syntax: - '' Example: - '' SetEnchants Enchants an item with specified enchantments. Syntax: - '' Example: - '' SetName Sets the name of an item. Syntax: - 'SetName: <user-defined item name>' Example: - 'SetName: &aCosmetics' SetLore Sets the lore text for an item. For multiple lines, quotation marks \"\" are required in lieu of apostraphies '' . Syntax: - 'SetLore: <user-defined lore text>' Example: - 'SetLore: This item is locked.' - \"SetLore: This item is locked&r\\nMessage an Admin if this is an error.\" SetNBT (obsolete) Sets NBT (Named Binary Tag) data for an entity or block. Syntax: - '' Example: - '' SetType Sets the slot item type of an entity or block. Syntax: - 'SetType: <entity or block>' Example: - 'SetType: grass_block' Permission Management HasPermission or Permission Checks if a player has a specific permission. Syntax: - 'HasPermission: <permission node>' OR - 'Permission: <permission node>' Example: - 'HasPermission: essentials.home' OR - 'Permission: essentials.home' AddPermission Grants a player a specific permission. Syntax: - 'AddPermission: <permission node>' Example: - 'AddPermission: essentials.home' RemovePermission Removes a specific permission from a player. Syntax: - 'RemovePermission: <permission node>' Example: - 'RemovePermission: essentials.home' Game Mechanics Condition Evaluates a specified condition and returns a boolean result. Syntax: - 'Condition: <numeral value or placeholder> <expressions: ==, <=, >=> <numeral value or placeholder>' Example: - 'Condition: %essentials_ping% >= 30' - 'Condition: %value% == %acceptable_value%' Particle Generates particle effects at a specified location. Syntax: - '' Example: - '' ResetFrame Resets the frame counter. Syntax: - '' Example: - '' ResetTick Resets the tick counter. Syntax: - '' Example: - '' Send Sends a message or data to a specified server. Syntax: - '' Example: - '' Sound Plays a sound at a specified location in the game world. Available compatible minecraft sound IDs can be found here . Syntax: - 'Sound: <valid minecraft sound ID>,<volume>,<pitch>' Example: - 'Sound: ENTITY_PLAYER_LEVELUP,1.0,2.0' Economy Functions MoneyBalance Retrieves the current balance of in-game currency for a player. Syntax: - '' Example: - '' MoneyDeposit Deposits a specified amount of in-game currency into a player's balance. Syntax: - 'MoneyDeposit: <currency>,<amount>' Example: - 'MoneyDeposit: money,%cosmetic-price%' MoneyWithdraw Withdraws a specified amount of in-game currency from a player's balance. Syntax: - '<currency>,<amount>' Example: - 'money,%cosmetic-price%' Miscellaneous Random Generates a random number within a specified range. Syntax: - '' Example: - ''","title":"Functions"},{"location":"functions/#introduction-to-functions","text":"Functions are the fundamental building blocks of DynamicGui and are an essential part to what makes DynamicGui truly dynamic. Function sections can be written to be as simple or complex to suit your needs. To understand the different functions and their syntax, we must first understand their base principle. Note: The function name when used within the required syntax is not case-sensitive. For example, you could type the function 'CopyBackMetadata alternatively as: copybackmetadata , COPYBACKMETADATA , or even cOPYbACKmETAdATA . The function names were written in this documentation to improve readability.","title":"Introduction to Functions"},{"location":"functions/#_1","text":"","title":""},{"location":"functions/#function-anatomy","text":"Functions can be used for either Top-Level or Slot-Level behavior but the result is similar in nature. Function Properties Description Function Headers Function Headers are a required function property, but are essential to sectioning certain functions. An added benefit is that these Function Headers can be named whatever you want. It is best to keep these descriptive as they will help aid in potential troubleshooting or updating. Types Types are the different function types to determine how the GUI is desired to behave. You can have either a single type in the form of a string, or, you can have types in the form of a list. These are the different available types: switch_menu load click left right middle shift_click shift_left shift_right fail exit_menu Functions This is where you will place your functions. You can have either a single function in the form of a string, or, you can have functions in the form of a list. Fail-On The specified function where its condition was not expected or met. Whenever you need a function to occur based on a condition not expected, you will need to use the fail type. Example of Top-Level functions: functions: broadcast-load: #This is a Function Header. type: \"load\" #This is a type, using the 'load' type. functions: - 'HasPermission: essentials.broadcast' #This is a list function. broadcast-click: #This can be named anything but it should be descriptive type: #This is a type, using the 'left' and 'right' types in the form of a list function. - \"left\" - \"right\" functions: - 'Broadcast: This is an important broadcast.' #This is a list function. function-failure-permission: #This is also a Function Header fail-on: \"fail\" #This is the fail type. functions: \"Pmsg: Insufficient permission.\" #This is a string function. Example of Slot-Level functions: '13': icon: paper name: \"tutorial\" functions: loader: #This is a Function Header. type: \"load\" #This is a type, using the 'load' type in the form of a string function. functions: #This is a list function. - 'permission: tutorial' - 'setlore: &cUNLOCKED' function-fail-permission: #This is also a Function Header fail-on: 'permission: tutorial' #This is a function in which its condition was not met, while also utilizing a string function. type: \"fail\" #This is a type, using the 'fail' type. functions: \"setlore: &cLOCKED\" #This is a function. clicker: #This is a Function Header. fail-on: - 'permission: tutorial' #This is a function in which its condition was not met, while also utilizing a list function. type: \"click\" #This is a type, using the 'click' type in the form of a string function. functions: #This is a list function. - 'pmsg: Insufficient permission.' - 'sound: ENTITY_BLAZE_HURT,1.0,2.0'","title":"Function Anatomy"},{"location":"functions/#_2","text":"","title":""},{"location":"functions/#list-of-functions","text":"","title":"List of Functions"},{"location":"functions/#navigation-and-gui-management","text":"","title":"Navigation and GUI Management"},{"location":"functions/#back","text":"Navigate back to a previous state or location with a GUI. Syntax: - 'Back' Example: - 'Back'","title":"Back"},{"location":"functions/#_3","text":"","title":""},{"location":"functions/#hasback","text":"Checks if navigation history ('Back' functionality) is available. Syntax: - 'HasBack' Example: - 'HasBack'","title":"HasBack"},{"location":"functions/#_4","text":"","title":""},{"location":"functions/#setback","text":"Sets a designated back location or state within a GUI. Syntax: - 'SetBack: <boolean result>' Examples: - 'SetBack: true'","title":"SetBack"},{"location":"functions/#_5","text":"","title":""},{"location":"functions/#gui","text":"Open a specified GUI. Syntax: - 'Gui: <name of gui>.yml' Example: - 'Gui: cosmetics.yml'","title":"Gui"},{"location":"functions/#_6","text":"","title":""},{"location":"functions/#refreshgui","text":"Update or refresh the contents of the GUI currently being viewed. Syntax: - 'RefreshGui' Example: - 'RefreshGui'","title":"RefreshGUI"},{"location":"functions/#_7","text":"","title":""},{"location":"functions/#refreshslot","text":"Update or refresh the contents of a specific slot within the GUI. Syntax: - 'RefreshSlot: <Slot # (Range: 0-53)>' Example: - 'RefreshSlot: 31'","title":"RefreshSlot"},{"location":"functions/#_8","text":"","title":""},{"location":"functions/#hasmetadata","text":"Checks if metadata is set. Syntax: - 'HasMetadata' Example: - 'HasMetadata'","title":"HasMetadata"},{"location":"functions/#_9","text":"","title":""},{"location":"functions/#copybackmetadata","text":"Copies metadata associated with navigation history. Syntax: - 'CopyBackMetadata: true' Example: - 'CopyBackMetadata: true'","title":"CopyBackMetadata"},{"location":"functions/#_10","text":"","title":""},{"location":"functions/#isguimetadataset","text":"Checks if specific GUI metadata is set. Syntax: - 'IsGuiMetadataSet: <user defined metadata>' Example: - 'IsGUIMetadataSet: %metadata_custom%'","title":"IsGuiMetadataSet"},{"location":"functions/#_11","text":"","title":""},{"location":"functions/#setmetadata","text":"Sets metadata for a specific entity or block. Syntax: - 'SetMetadata: <entity>,<metadata string you want to set>,<metadata you want to use>' Examples: - 'SetMetadata: gui,preset_value,300' - 'SetMetadata: gui,preset_value,%defined_macro-metadata_price1%'","title":"SetMetadata"},{"location":"functions/#_12","text":"","title":""},{"location":"functions/#checkmovable","text":"Checks if an entity or block is movable. Syntax: - '' Example: - ''","title":"CheckMovable"},{"location":"functions/#_13","text":"","title":""},{"location":"functions/#player-and-entity-management","text":"","title":"Player and Entity Management"},{"location":"functions/#asyncrunning","text":"Checks if an asynchronous task is currently running. Syntax: - '' Example: - ''","title":"AsyncRunning"},{"location":"functions/#_14","text":"","title":""},{"location":"functions/#checkitemtypeinhand","text":"Checks the type of item currently held by the player. Syntax: - '' Example: - ''","title":"CheckItemTypeInHand"},{"location":"functions/#_15","text":"","title":""},{"location":"functions/#checklevel","text":"Verifies if a specified level meets a certain criteria. Syntax: - '' Example: - ''","title":"CheckLevel"},{"location":"functions/#_16","text":"","title":""},{"location":"functions/#checkplayerworld","text":"Determines the world in which a player is located. Syntax: - '' Example: - ''","title":"CheckPlayerWorld"},{"location":"functions/#_17","text":"","title":""},{"location":"functions/#executec","text":"Executes a command on the server. Syntax: - '' Example: - ''","title":"Executec"},{"location":"functions/#_18","text":"","title":""},{"location":"functions/#executep","text":"Executes a command as if a player had typed it. Syntax: - '' Example: - ''","title":"Executep"},{"location":"functions/#_19","text":"","title":""},{"location":"functions/#isbedrockplayer","text":"Checks if a player is using Minecraft: Bedrock Edition. Syntax: - '' Example: - ''","title":"IsBedrockPlayer"},{"location":"functions/#_20","text":"","title":""},{"location":"functions/#loggedin","text":"Checks if a player is logged into the server. Syntax: - '' Example: - ''","title":"LoggedIn"},{"location":"functions/#_21","text":"","title":""},{"location":"functions/#_22","text":"","title":""},{"location":"functions/#cooldown-and-timing","text":"","title":"Cooldown and Timing"},{"location":"functions/#checktick","text":"Retrieves the current tick (unit of time) in the game. Syntax: - '' Example: - ''","title":"CheckTick"},{"location":"functions/#_23","text":"","title":""},{"location":"functions/#isoncooldown","text":"Checks if a specified action or player is currently on cooldown. Syntax: - '' Example: - ''","title":"IsOnCooldown"},{"location":"functions/#_24","text":"","title":""},{"location":"functions/#setcooldown","text":"Sets a cooldown for a specified action or player. Syntax: - '' Example: - ''","title":"SetCooldown"},{"location":"functions/#_25","text":"","title":""},{"location":"functions/#delay","text":"Introduces a delay or pause in script execution. Syntax: - '' Example: - ''","title":"Delay"},{"location":"functions/#_26","text":"","title":""},{"location":"functions/#_27","text":"","title":""},{"location":"functions/#game-rule-and-environment","text":"","title":"Game Rule and Environment"},{"location":"functions/#getgamerule","text":"Retrieves the value of a specific game rule in the world. Syntax: - '' Example: - ''","title":"GetGameRule"},{"location":"functions/#_28","text":"","title":""},{"location":"functions/#setgamerule","text":"Sets a specific game rule in the world. Syntax: - '' Example: - ''","title":"SetGamerule"},{"location":"functions/#_29","text":"","title":""},{"location":"functions/#_30","text":"","title":""},{"location":"functions/#logging-and-messaging","text":"","title":"Logging and Messaging"},{"location":"functions/#log","text":"Logs a message or event to the server console. Syntax: - 'Log: <message to be displayed as a log in the console>' Example: - 'Log: %player% purchased an item.'","title":"Log"},{"location":"functions/#_31","text":"","title":""},{"location":"functions/#msg-or-pmsg","text":"Sends a message to players in the server. Syntax: - 'Msg: <message sent to player, supports vanilla colors codes only>' OR - 'Pmsg: <message sent to player>' Example: - 'Msg: Insufficient permission.' OR - 'Pmsg: Insufficient permission.'","title":"Msg or Pmsg"},{"location":"functions/#_32","text":"","title":""},{"location":"functions/#minimsg","text":"Sends a message to the player on the server using the minimessage format. Syntax: - 'MiniMsg: <message sent to player, supports minimessage codes only>' Example: - ''","title":"MiniMsg"},{"location":"functions/#_33","text":"","title":""},{"location":"functions/#msgjson","text":"Sends a message to the player on the server using JSON format. Syntax: - '' Example: - ''","title":"MsgJson"},{"location":"functions/#_34","text":"","title":""},{"location":"functions/#broadcast","text":"Sends a message to all players in the Minecraft server. Syntax: - 'Bradocast: <message sent to all players>' Example: - 'Broadcast: An event will occur soon. Meet us at spawn! /spawn'","title":"Broadcast"},{"location":"functions/#_35","text":"","title":""},{"location":"functions/#minibroadcast","text":"Sends a minimized message to all players in the Minecraft server. Syntax: - '' Example: - ''","title":"MiniBroadcast"},{"location":"functions/#_36","text":"","title":""},{"location":"functions/#broadcastjson","text":"Sends a JSON-formatted message to all players in the Minecraft server. Syntax: - '' Example: - ''","title":"BroadcastJson"},{"location":"functions/#_37","text":"","title":""},{"location":"functions/#inventory-and-item-management","text":"","title":"Inventory and Item Management"},{"location":"functions/#openinventoryslots","text":"Checks if a player has an open inventory slot within their inventory. Opens additional inventory slots within a GUI. Syntax: - 'OpenInventorySlots: <# of slots, maximum: 36>' Example: - 'OpenInventorySlots: 1'","title":"OpenInventorySlots"},{"location":"functions/#_38","text":"","title":""},{"location":"functions/#removeslot","text":"Removes an item from a specified inventory slot within the player's inventory. Syntax: - 'RemoveSlot: <Slot #, maximum: 36>' Example: - 'RemoveSlot: 1'","title":"RemoveSlot"},{"location":"functions/#_39","text":"","title":""},{"location":"functions/#setamount","text":"Sets the display quantity for an item as if it is a stack of items. Syntax: - 'SetAmount: <Amount, maximum: 64>' Example: - 'SetAmount: 32'","title":"SetAmount"},{"location":"functions/#_40","text":"","title":""},{"location":"functions/#setclose","text":"Closes the current GUI. Syntax: - 'SetClose: <boolean result>' Example: - 'SetClose: true'","title":"SetClose"},{"location":"functions/#_41","text":"","title":""},{"location":"functions/#setdurability","text":"Sets the durability of an item. Syntax: - '' Example: - ''","title":"SetDurability"},{"location":"functions/#_42","text":"","title":""},{"location":"functions/#setenchants","text":"Enchants an item with specified enchantments. Syntax: - '' Example: - ''","title":"SetEnchants"},{"location":"functions/#_43","text":"","title":""},{"location":"functions/#setname","text":"Sets the name of an item. Syntax: - 'SetName: <user-defined item name>' Example: - 'SetName: &aCosmetics'","title":"SetName"},{"location":"functions/#_44","text":"","title":""},{"location":"functions/#setlore","text":"Sets the lore text for an item. For multiple lines, quotation marks \"\" are required in lieu of apostraphies '' . Syntax: - 'SetLore: <user-defined lore text>' Example: - 'SetLore: This item is locked.' - \"SetLore: This item is locked&r\\nMessage an Admin if this is an error.\"","title":"SetLore"},{"location":"functions/#_45","text":"","title":""},{"location":"functions/#setnbt-obsolete","text":"Sets NBT (Named Binary Tag) data for an entity or block. Syntax: - '' Example: - ''","title":"SetNBT (obsolete)"},{"location":"functions/#_46","text":"","title":""},{"location":"functions/#settype","text":"Sets the slot item type of an entity or block. Syntax: - 'SetType: <entity or block>' Example: - 'SetType: grass_block'","title":"SetType"},{"location":"functions/#_47","text":"","title":""},{"location":"functions/#permission-management","text":"","title":"Permission Management"},{"location":"functions/#haspermission-or-permission","text":"Checks if a player has a specific permission. Syntax: - 'HasPermission: <permission node>' OR - 'Permission: <permission node>' Example: - 'HasPermission: essentials.home' OR - 'Permission: essentials.home'","title":"HasPermission or Permission"},{"location":"functions/#_48","text":"","title":""},{"location":"functions/#addpermission","text":"Grants a player a specific permission. Syntax: - 'AddPermission: <permission node>' Example: - 'AddPermission: essentials.home'","title":"AddPermission"},{"location":"functions/#_49","text":"","title":""},{"location":"functions/#removepermission","text":"Removes a specific permission from a player. Syntax: - 'RemovePermission: <permission node>' Example: - 'RemovePermission: essentials.home'","title":"RemovePermission"},{"location":"functions/#_50","text":"","title":""},{"location":"functions/#_51","text":"","title":""},{"location":"functions/#game-mechanics","text":"","title":"Game Mechanics"},{"location":"functions/#condition","text":"Evaluates a specified condition and returns a boolean result. Syntax: - 'Condition: <numeral value or placeholder> <expressions: ==, <=, >=> <numeral value or placeholder>' Example: - 'Condition: %essentials_ping% >= 30' - 'Condition: %value% == %acceptable_value%'","title":"Condition"},{"location":"functions/#_52","text":"","title":""},{"location":"functions/#particle","text":"Generates particle effects at a specified location. Syntax: - '' Example: - ''","title":"Particle"},{"location":"functions/#_53","text":"","title":""},{"location":"functions/#resetframe","text":"Resets the frame counter. Syntax: - '' Example: - ''","title":"ResetFrame"},{"location":"functions/#_54","text":"","title":""},{"location":"functions/#resettick","text":"Resets the tick counter. Syntax: - '' Example: - ''","title":"ResetTick"},{"location":"functions/#_55","text":"","title":""},{"location":"functions/#send","text":"Sends a message or data to a specified server. Syntax: - '' Example: - ''","title":"Send"},{"location":"functions/#_56","text":"","title":""},{"location":"functions/#sound","text":"Plays a sound at a specified location in the game world. Available compatible minecraft sound IDs can be found here . Syntax: - 'Sound: <valid minecraft sound ID>,<volume>,<pitch>' Example: - 'Sound: ENTITY_PLAYER_LEVELUP,1.0,2.0'","title":"Sound"},{"location":"functions/#_57","text":"","title":""},{"location":"functions/#_58","text":"","title":""},{"location":"functions/#economy-functions","text":"","title":"Economy Functions"},{"location":"functions/#moneybalance","text":"Retrieves the current balance of in-game currency for a player. Syntax: - '' Example: - ''","title":"MoneyBalance"},{"location":"functions/#_59","text":"","title":""},{"location":"functions/#moneydeposit","text":"Deposits a specified amount of in-game currency into a player's balance. Syntax: - 'MoneyDeposit: <currency>,<amount>' Example: - 'MoneyDeposit: money,%cosmetic-price%'","title":"MoneyDeposit"},{"location":"functions/#_60","text":"","title":""},{"location":"functions/#moneywithdraw","text":"Withdraws a specified amount of in-game currency from a player's balance. Syntax: - '<currency>,<amount>' Example: - 'money,%cosmetic-price%'","title":"MoneyWithdraw"},{"location":"functions/#_61","text":"","title":""},{"location":"functions/#_62","text":"","title":""},{"location":"functions/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"functions/#random","text":"Generates a random number within a specified range. Syntax: - '' Example: - ''","title":"Random"},{"location":"functions/#_63","text":"","title":""},{"location":"macros/","text":"Introdunction to Macros Macros, macros, macros.. They certainly make your configuration life easier. From simple to complex GUIs, you can count on macros to increase ease of GUI production as well for GUI configuration and maintenance, such as making user-defined placeholders to keep easy-to-remember or easy-to-recall values or strings, lists of functions, or an entire section of functions. You can even use macros within a macro to increase customization! Types of Macros There are three macro types: String Macros, List Macros, and Section Macros. 1. String Macros String Macros are the most basic type of macros. They act as placeholders to keep basic or lengthy values or strings. Examples of String Macros: macros: '%name%': 'Your name is: %prefix% %player%' '%prefix%': '%luckperms_prefix%' Note: %prefix% placeholder may vary on your plugin needs. If you're using luckperms, you may use %luckperms_prefix% in lieu. You can also macro these long plugin placeholders for your own. 2. List Macros List macros are useful for a lengthy list of functions like checks and conditions. Example of a List Macro: macros: '%function-list%': - 'HasPermission: permission.check' - 'pmsg: You do have permission for this.' - 'Broadcast: Hey everybody! %player% has permission for this!' 3. Section Macros Section Macros contain an entire section of functions typically for a particular slot, but can be called for use by any slot. Instead of repetative copy-and-paste functions where the intent for multiple slot items to use identical functions, a Section Macro can be used. Section Macro syntax is List Macros you read about above. However, your value cannot be within apostrophies or quotations -- these are to be placed within the slot item function call. Full Example of a Section Macro: With this example, when you click on slot 4 with paper as the icon, the Section Macro will be executed by messaging the player because it was called as a function with the slot item being clicked, assuming your ping is equal to or less than 50. If your ping is higher than 50, it will instead message the player saying your ping is too high. macros: '%macro-ping%': - 'pmsg: Your ping is too high.' '%macro-function1%': clicker: type: \"click\" functions: - 'condition: %essentials_ping% <= 50' - 'pmsg: %name%' function-failure-ping: fail-on: 'condition: %essentials_ping% <= 50' type: \"fail\" functions: - '%macro-ping%' '4': macros: '%name%': 'Your name is %prefix% %player%.' '%prefix%': '%luckperms_prefix%' icon: paper name: '%name%' functions: \"%macro-condition1%\"","title":"Macros"},{"location":"macros/#introdunction-to-macros","text":"Macros, macros, macros.. They certainly make your configuration life easier. From simple to complex GUIs, you can count on macros to increase ease of GUI production as well for GUI configuration and maintenance, such as making user-defined placeholders to keep easy-to-remember or easy-to-recall values or strings, lists of functions, or an entire section of functions. You can even use macros within a macro to increase customization!","title":"Introdunction to Macros"},{"location":"macros/#types-of-macros","text":"There are three macro types: String Macros, List Macros, and Section Macros.","title":"Types of Macros"},{"location":"macros/#1-string-macros","text":"String Macros are the most basic type of macros. They act as placeholders to keep basic or lengthy values or strings. Examples of String Macros: macros: '%name%': 'Your name is: %prefix% %player%' '%prefix%': '%luckperms_prefix%' Note: %prefix% placeholder may vary on your plugin needs. If you're using luckperms, you may use %luckperms_prefix% in lieu. You can also macro these long plugin placeholders for your own.","title":"1. String Macros"},{"location":"macros/#_1","text":"","title":""},{"location":"macros/#2-list-macros","text":"List macros are useful for a lengthy list of functions like checks and conditions. Example of a List Macro: macros: '%function-list%': - 'HasPermission: permission.check' - 'pmsg: You do have permission for this.' - 'Broadcast: Hey everybody! %player% has permission for this!'","title":"2. List Macros"},{"location":"macros/#_2","text":"","title":""},{"location":"macros/#3-section-macros","text":"Section Macros contain an entire section of functions typically for a particular slot, but can be called for use by any slot. Instead of repetative copy-and-paste functions where the intent for multiple slot items to use identical functions, a Section Macro can be used. Section Macro syntax is List Macros you read about above. However, your value cannot be within apostrophies or quotations -- these are to be placed within the slot item function call. Full Example of a Section Macro: With this example, when you click on slot 4 with paper as the icon, the Section Macro will be executed by messaging the player because it was called as a function with the slot item being clicked, assuming your ping is equal to or less than 50. If your ping is higher than 50, it will instead message the player saying your ping is too high. macros: '%macro-ping%': - 'pmsg: Your ping is too high.' '%macro-function1%': clicker: type: \"click\" functions: - 'condition: %essentials_ping% <= 50' - 'pmsg: %name%' function-failure-ping: fail-on: 'condition: %essentials_ping% <= 50' type: \"fail\" functions: - '%macro-ping%' '4': macros: '%name%': 'Your name is %prefix% %player%.' '%prefix%': '%luckperms_prefix%' icon: paper name: '%name%' functions: \"%macro-condition1%\"","title":"3. Section Macros"}]}